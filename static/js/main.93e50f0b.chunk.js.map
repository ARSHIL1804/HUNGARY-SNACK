{"version":3,"sources":["Board.js","App.js","index.js"],"names":["BOARD_SIZE","search","state","cellVal","i","length","cell","Board","createBoard","counter","row","col","board","intializeSnake","Math","round","TmpSnake","push","setState","snake","getClassname","foodCell","moveSnakeAutomatically","tmpRow","tmpCol","dummy","preRow","preCol","moveHead","score","Array","fill","map","direction","gameOver","msg","directionChanged","handleKeyDOWN","bind","event","this","keyCode","goLEFT","goUP","goRIGHT","goDOWN","resetGame","console","log","window","addEventListener","gameLoop","setTimeout","eatFood","tmp","moveUP","moveDOWN","moveLEFT","moveRIGHT","checkDeath","food","newFood","floor","random","Render","className","rowIndex","cellIndex","newDirection","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93e50f0b.chunk.js","sourcesContent":["import React, { useState,useEffect,Component} from 'react'\nimport './board.css'\nimport useInterval from './useInterval'\n\n\nconst direction={\n  UP:'UP',RIGHT:'RIGTH',LEFT:'LEFT',DOWN:'DOWN'\n}\n\nconst BOARD_SIZE=10\n\nfunction search(state,cellVal){\n  for(let i=0;i<state.length;i++){\n    if(state[i].cell==cellVal)return true;\n  }\n  return false\n}\n\n\nexport default class Board extends Component {\n    constructor(){\n    super()\n    this.state={\n      score:0,\n      board:Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill()),\n      snake:[],\n      foodCell:{cell:82},\n      direction:'DOWN',\n      gameOver:0,\n      msg:\"\",\n      directionChanged:false\n    }\n    this.handleKeyDOWN = this.handleKeyDOWN.bind(this)\n    this.moveSnakeAutomatically=this.moveSnakeAutomatically.bind(this)\n  }\n  handleKeyDOWN(event){\n    if(this.state.gameOver==1 && event.keyCode==32){\n      this.resetGame();\n      return \n    }\n    if(this.state.directionChanged) return;\n    switch (event.keyCode) {\n      case 37:\n      case 65:\n        this.goLEFT()\n        break\n      case 38:    \n      case 87:\n        this.goUP()\n        break\n      case 39:\n      case 68:\n        this.goRIGHT()\n        break\n      case 40:\n      case 83:\n        this.goDOWN()\n        break\n      default:\n    }\n    this.setState({directionChanged:true})\n  }\n  componentDidMount(){\n    console.log(\"BEFORE\")\n    this.createBoard()\n    this.intializeSnake();\n    console.log(\"MIDDLE\")\n    window.addEventListener('keydown', this.handleKeyDOWN);\n    this.gameLoop();\n  }\n  gameLoop(){\n      setTimeout(() => {\n        if(this.state.gameOver==0){\n        this.moveSnakeAutomatically()\n        this.eatFood();\n        this.setState({ directionChanged: false })\n        }\n        this.gameLoop();\n      }, 200);\n  }\n  eatItself(tmp){\n    for(let i=1;i<tmp.length;i++){\n      if(tmp[0] == tmp[i]){\n       let snake=[]\n       console.log(\"ebfrg\")\n       this.setState({\n         snake:snake\n       })\n      }\n    }\n  }\n  createBoard = () => {\n    let counter=1;\n    for (let row = 0; row < BOARD_SIZE; row++) {\n         for (let col = 0; col < BOARD_SIZE; col++) {\n              this.state.board[row][col]=counter++;\n          }\n    }\n   };\n  intializeSnake = ()=>{\n    let row= Math.round(this.state.board.length / 3);\n    let col= Math.round(this.state.board[0].length / 3);\n    let cell= Math.round(this.state.board[row][col]);\n    let TmpSnake=[];\n    TmpSnake.push({row,col,cell});\n    TmpSnake.push({row:row-1,col:col,cell:cell-10})\n    TmpSnake.push({row:row-2,col:col,cell:cell-20})\n    this.setState({\n      snake:TmpSnake\n    })\n  };\n  getClassname =(snake,foodCell,cellVal)=>{\n    if(foodCell===cellVal){\n      return 'cell foodcell'\n    }\n    else if(search(snake,cellVal)){\n      return 'cell snakecell'      \n    }\n    else{\n      return 'cell'\n    }\n }  \n  moveSnakeAutomatically=()=>{\n    let dummy=this.state.snake;\n    let preRow=dummy[0].row;\n    let preCol=dummy[0].col;\n    let tmpRow,tmpCol;\n    this.moveHead();\n    for(let i=1;i<dummy.length;i++){\n      tmpRow=dummy[i].row;\n      tmpCol=dummy[i].col;\n      dummy[i].row=preRow;\n      dummy[i].col=preCol;\n      dummy[i].cell=this.state.board[dummy[i].row][dummy[i].col]\n      preRow=tmpRow;\n      preCol=tmpCol;\n    }\n    this.setState({state:dummy})\n  }\n  moveHead(){\n    console.log();\n    switch (this.state.direction) {\n      case 'UP':\n        this.moveUP()\n        break;\n      case 'DOWN':\n          this.moveDOWN()\n          break;\n      case 'LEFT':\n            this.moveLEFT()\n            break;\n      case 'RIGHT':\n              this.moveRIGHT()\n              break;\n    }\n  }\n  \n  moveUP(){\n      let dummy=this.state.snake\n      dummy[0].row -=1;\n      dummy[0].cell-=10;\n      this.checkDeath(dummy)\n      this.setState({dummy})\n  }\n  moveDOWN(){\n    let dummy=this.state.snake\n      dummy[0].row +=1;\n      dummy[0].cell+=10\n      this.checkDeath(dummy)\n      this.setState({dummy})\n  }\n  moveLEFT(){\n    let dummy=this.state.snake\n      dummy[0].col -=1;\n      dummy[0].cell-=1 \n      this.checkDeath(dummy)\n      this.setState({snake:dummy})\n     }\n  moveRIGHT(){\n    let dummy=this.state.snake\n      dummy[0].col +=1;\n      dummy[0].cell+=1\n      this.checkDeath(dummy)\n      this.setState({snake:dummy})\n  }\n  checkDeath(dummy){\n     let row=dummy[0].row\n     let col=dummy[0].col;\n     if(row <0 || row>9  || col<0 || col>9 ){\n\n         this.setState({gameOver:1,msg:\"Touched One Of The Boundries\"});\n     }\n     else if(row >=0 && row<=9  && col>=0 && col<=9) {\n       for (let i=1;i<dummy.length;i++){\n         if(dummy[0].cell == dummy[i].cell){\n            this.setState({gameOver:1,msg:\"Touched Youself\"})\n         }\n       }\n     }\n  }\n  eatFood(){\n      let snake=this.state.snake;\n      let food=this.state.foodCell;\n    if(snake[0].cell==food.cell){\n      snake.push(food)\n      let newFood=Math.floor(Math.random() * (BOARD_SIZE*BOARD_SIZE))\n      while(search(this.state.snake,newFood) && newFood !=food.cell){\n        newFood=Math.floor(Math.random() * (BOARD_SIZE*BOARD_SIZE))\n      }\n      let foodCell={cell:newFood}\n      this.setState({snake:snake,foodCell:foodCell,score:this.state.score+1})\n    }\n  }\n  resetGame(){\n    this.setState({\n      score:0,\n      board:Array(BOARD_SIZE).fill().map(() => Array(BOARD_SIZE).fill()),\n      snake:[],\n      foodCell:{cell:82},\n      direction:'DOWN',\n      gameOver:0,\n      msg:\"\"\n    })\n    this.createBoard()\n    this.intializeSnake()\n  }\n  render() {\n    let Render\n    if(this.state.gameOver==0){ \n            Render=<div className=\"board\">\n            {this.state.board.map((row,rowIndex)=>(\n                <div key={rowIndex} className=\"row\">\n                  {\n                    row.map((cellVal,cellIndex)=>{\n                      const className=this.getClassname(this.state.snake,this.state.foodCell.cell,cellVal)\n                      return <div key={cellIndex} className={className}></div>;\n                    })}\n                </div>\n             ))} \n          </div>\n    }\n    else{\n      Render=<><h3>{this.state.msg}</h3><h1>GAME OVER </h1><h3>Click on spacebar to reset</h3></>\n    }\n    return (\n      <>\n      <h1>SCORE : {this.state.score}</h1>\n      {Render}\n     </>\n    )\n  }\n\n  goLEFT() {\n    let newDirection = this.state.direction === 'RIGHT' ? 'RIGHT' : 'LEFT'\n    this.setState({ direction: newDirection })\n  }\n\n  goUP() {\n    let newDirection = this.state.direction === 'DOWN' ? 'DOWN' : 'UP'\n    this.setState({ direction: newDirection })\n  }\n\n  goRIGHT() {\n    let newDirection = this.state.direction === 'LEFT' ? 'LEFT' : 'RIGHT'\n    this.setState({ direction: newDirection })\n  }\n\n  goDOWN() {\n    let newDirection = this.state.direction === 'UP' ? 'UP' : 'DOWN'\n    this.setState({ direction: newDirection })\n  }\n\n}\n","import './App.css';\nimport Board from './Board';\nimport React, { Component } from 'react'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board/>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}